//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\LSharpParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class LSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACES=1, SINGLE_LINE_COMMENT=2, DELIMITED_COMMENT=3, USING=4, PART=5, 
		OF=6, IN=7, TO=8, INTERFACE=9, CLASS=10, ENUM=11, FROM=12, PUBLIC=13, 
		INTERNAL=14, PRIVATE=15, STATIC=16, NEW=17, RETURN=18, BREAK=19, WITH=20, 
		VAR=21, UNIT=22, NULL=23, THIS=24, BASE=25, WHILE=26, ENTRYPOINT=27, SC=28, 
		LEAD=29, ARR=30, DOT=31, LT=32, GT=33, OP=34, CP=35, OSB=36, CSB=37, EQ=38, 
		PEQ=39, MEQ=40, AEQ=41, DEQ=42, QM=43, COL=44, EM=45, COM=46, PLUS=47, 
		MINUS=48, MULT=49, DIV=50, MOD=51, LTE=52, GTE=53, EQS=54, NEQ=55, AND=56, 
		OR=57, WOT=58, DEF=59, NIL=60, IDENT=61, LITINT=62, LITDEC=63, LITCHAR=64, 
		LITSTR=65, LITBOOL=66;
	public const int
		RULE_program = 0, RULE_usingList = 1, RULE_using = 2, RULE_namespace = 3, 
		RULE_langMember = 4, RULE_interfaceDef = 5, RULE_classDef = 6, RULE_baseClass = 7, 
		RULE_enumDef = 8, RULE_interfaceMember = 9, RULE_classMember = 10, RULE_statement = 11, 
		RULE_nonEndingStatement = 12, RULE_endingStatement = 13, RULE_breakStatement = 14, 
		RULE_throwStatement = 15, RULE_varDef = 16, RULE_localDef = 17, RULE_funcDef = 18, 
		RULE_ctorDef = 19, RULE_params = 20, RULE_assign = 21, RULE_triStatement = 22, 
		RULE_whileStatement = 23, RULE_foreachStatement = 24, RULE_switchStatement = 25, 
		RULE_caseBlock = 26, RULE_defaultBlock = 27, RULE_ifBlock = 28, RULE_elseBlock = 29, 
		RULE_returnStatement = 30, RULE_emptyStatement = 31, RULE_nullCheck = 32, 
		RULE_expression = 33, RULE_funcCall = 34, RULE_args = 35, RULE_ident = 36, 
		RULE_binaryOp = 37, RULE_assignOperator = 38, RULE_access = 39;
	public static readonly string[] ruleNames = {
		"program", "usingList", "using", "namespace", "langMember", "interfaceDef", 
		"classDef", "baseClass", "enumDef", "interfaceMember", "classMember", 
		"statement", "nonEndingStatement", "endingStatement", "breakStatement", 
		"throwStatement", "varDef", "localDef", "funcDef", "ctorDef", "params", 
		"assign", "triStatement", "whileStatement", "foreachStatement", "switchStatement", 
		"caseBlock", "defaultBlock", "ifBlock", "elseBlock", "returnStatement", 
		"emptyStatement", "nullCheck", "expression", "funcCall", "args", "ident", 
		"binaryOp", "assignOperator", "access"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'using'", "'part'", "'of'", "'in'", "'to'", "'interface'", 
		"'class'", "'enum'", "'from'", "'public'", "'internal'", "'private'", 
		"'static'", "'new'", "'return'", "'break'", "'with'", "'var'", "'unit'", 
		"'null'", "'this'", "'base'", "'while'", "'EntryPoint'", "';'", "'>>'", 
		"'=>'", "'.'", "'<'", "'>'", "'('", "')'", "'['", "']'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'?'", "':'", "'!'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'??'", 
		"'?:'", "'!:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACES", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "USING", 
		"PART", "OF", "IN", "TO", "INTERFACE", "CLASS", "ENUM", "FROM", "PUBLIC", 
		"INTERNAL", "PRIVATE", "STATIC", "NEW", "RETURN", "BREAK", "WITH", "VAR", 
		"UNIT", "NULL", "THIS", "BASE", "WHILE", "ENTRYPOINT", "SC", "LEAD", "ARR", 
		"DOT", "LT", "GT", "OP", "CP", "OSB", "CSB", "EQ", "PEQ", "MEQ", "AEQ", 
		"DEQ", "QM", "COL", "EM", "COM", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
		"LTE", "GTE", "EQS", "NEQ", "AND", "OR", "WOT", "DEF", "NIL", "IDENT", 
		"LITINT", "LITDEC", "LITCHAR", "LITSTR", "LITBOOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public UsingListContext usingList() {
			return GetRuleContext<UsingListContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public LangMemberContext[] langMember() {
			return GetRuleContexts<LangMemberContext>();
		}
		public LangMemberContext langMember(int i) {
			return GetRuleContext<LangMemberContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 80; usingList();
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PART) {
				{
				State = 83; @namespace();
				}
			}

			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << INTERNAL) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 86; langMember();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingListContext : ParserRuleContext {
		public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		public UsingListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingListContext usingList() {
		UsingListContext _localctx = new UsingListContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; @using();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 93; @using();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(LSharpParser.USING, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 4, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(USING);
			State = 100; ident(0);
			State = 101; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode PART() { return GetToken(LSharpParser.PART, 0); }
		public ITerminalNode OF() { return GetToken(LSharpParser.OF, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(PART);
			State = 104; Match(OF);
			State = 105; ident(0);
			State = 106; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LangMemberContext : ParserRuleContext {
		public InterfaceDefContext interfaceDef() {
			return GetRuleContext<InterfaceDefContext>(0);
		}
		public ClassDefContext classDef() {
			return GetRuleContext<ClassDefContext>(0);
		}
		public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		public LangMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_langMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterLangMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitLangMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLangMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LangMemberContext langMember() {
		LangMemberContext _localctx = new LangMemberContext(Context, State);
		EnterRule(_localctx, 8, RULE_langMember);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; interfaceDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; classDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; enumDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public ITerminalNode INTERFACE() { return GetToken(LSharpParser.INTERFACE, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public InterfaceMemberContext[] interfaceMember() {
			return GetRuleContexts<InterfaceMemberContext>();
		}
		public InterfaceMemberContext interfaceMember(int i) {
			return GetRuleContext<InterfaceMemberContext>(i);
		}
		public InterfaceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefContext interfaceDef() {
		InterfaceDefContext _localctx = new InterfaceDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_interfaceDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; access();
			State = 114; Match(INTERFACE);
			State = 115; ident(0);
			State = 116; Match(LEAD);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR || _la==UNIT) {
				{
				{
				State = 117; interfaceMember();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(LSharpParser.CLASS, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(LSharpParser.STATIC, 0); }
		public BaseClassContext baseClass() {
			return GetRuleContext<BaseClassContext>(0);
		}
		public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; access();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 124; Match(STATIC);
				}
			}

			State = 127; Match(CLASS);
			State = 128; ident(0);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 129; baseClass();
				}
			}

			State = 132; Match(LEAD);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 133; classMember();
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClassContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(LSharpParser.FROM, 0); }
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public BaseClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseClassContext baseClass() {
		BaseClassContext _localctx = new BaseClassContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(FROM);
			State = 140; ident(0);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COM) {
				{
				{
				State = 141; Match(COM);
				State = 142; ident(0);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public ITerminalNode ENUM() { return GetToken(LSharpParser.ENUM, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterEnumDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitEnumDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; access();
			State = 149; Match(ENUM);
			State = 150; ident(0);
			State = 151; Match(LEAD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LSharpParser.VAR, 0); }
		public ITerminalNode UNIT() { return GetToken(LSharpParser.UNIT, 0); }
		public InterfaceMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberContext interfaceMember() {
		InterfaceMemberContext _localctx = new InterfaceMemberContext(Context, State);
		EnterRule(_localctx, 18, RULE_interfaceMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !(_la==VAR || _la==UNIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 154; ident(0);
			State = 155; Match(OP);
			State = 156; @params();
			State = 157; Match(CP);
			State = 158; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		public CtorDefContext ctorDef() {
			return GetRuleContext<CtorDefContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 20, RULE_classMember);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; varDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; funcDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162; ctorDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NonEndingStatementContext nonEndingStatement() {
			return GetRuleContext<NonEndingStatementContext>(0);
		}
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
			case VAR:
			case NULL:
			case THIS:
			case BASE:
			case WHILE:
			case SC:
			case OP:
			case EM:
			case IDENT:
			case LITINT:
			case LITDEC:
			case LITCHAR:
			case LITSTR:
			case LITBOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; nonEndingStatement();
				}
				break;
			case RETURN:
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; endingStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonEndingStatementContext : ParserRuleContext {
		public LocalDefContext localDef() {
			return GetRuleContext<LocalDefContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public TriStatementContext triStatement() {
			return GetRuleContext<TriStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ITerminalNode QM() { return GetToken(LSharpParser.QM, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public NullCheckContext nullCheck() {
			return GetRuleContext<NullCheckContext>(0);
		}
		public NonEndingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonEndingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterNonEndingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitNonEndingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonEndingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonEndingStatementContext nonEndingStatement() {
		NonEndingStatementContext _localctx = new NonEndingStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_nonEndingStatement);
		int _la;
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; localDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171; triStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 172; whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 173; foreachStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 174; switchStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175; funcCall();
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 176; Match(QM);
					State = 179;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NEW:
					case THIS:
					case BASE:
					case IDENT:
						{
						State = 177; ident(0);
						}
						break;
					case DOT:
						{
						State = 178; Match(DOT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 183; Match(SC);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 185; emptyStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 186; nullCheck();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndingStatementContext : ParserRuleContext {
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public EndingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endingStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterEndingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitEndingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndingStatementContext endingStatement() {
		EndingStatementContext _localctx = new EndingStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_endingStatement);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; breakStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; throwStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(LSharpParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(BREAK);
			State = 195; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(LSharpParser.BREAK, 0); }
		public ITerminalNode WITH() { return GetToken(LSharpParser.WITH, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(BREAK);
			State = 198; Match(WITH);
			State = 199; ident(0);
			State = 200; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LSharpParser.VAR, 0); }
		public ITerminalNode IDENT() { return GetToken(LSharpParser.IDENT, 0); }
		public ITerminalNode STATIC() { return GetToken(LSharpParser.STATIC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_varDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; access();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 203; Match(STATIC);
				}
			}

			State = 206; Match(VAR);
			State = 207; Match(IDENT);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 208; Match(EQ);
				State = 209; expression(0);
				}
			}

			State = 212; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDefContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(LSharpParser.VAR, 0); }
		public ITerminalNode IDENT() { return GetToken(LSharpParser.IDENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalDefContext localDef() {
		LocalDefContext _localctx = new LocalDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_localDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(VAR);
			State = 215; Match(IDENT);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 216; Match(EQ);
				State = 217; expression(0);
				}
			}

			State = 220; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(LSharpParser.VAR, 0); }
		public ITerminalNode UNIT() { return GetToken(LSharpParser.UNIT, 0); }
		public ITerminalNode STATIC() { return GetToken(LSharpParser.STATIC, 0); }
		public ITerminalNode QM() { return GetToken(LSharpParser.QM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ENTRYPOINT() { return GetToken(LSharpParser.ENTRYPOINT, 0); }
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcDef);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
			case INTERNAL:
			case PRIVATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; access();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 223; Match(STATIC);
					}
				}

				State = 226;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR || _la==UNIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 227; ident(0);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 228; Match(QM);
					State = 231;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NEW:
					case THIS:
					case BASE:
					case IDENT:
						{
						State = 229; ident(0);
						}
						break;
					case DOT:
						{
						State = 230; Match(DOT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 235; Match(LEAD);
				State = 236; Match(OP);
				State = 237; @params();
				State = 238; Match(CP);
				State = 239; Match(ARR);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (RETURN - 17)) | (1L << (BREAK - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 240; statement();
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case ENTRYPOINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(ENTRYPOINT);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 247; Match(QM);
					State = 250;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NEW:
					case THIS:
					case BASE:
					case IDENT:
						{
						State = 248; ident(0);
						}
						break;
					case DOT:
						{
						State = 249; Match(DOT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 254; Match(LEAD);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (RETURN - 17)) | (1L << (BREAK - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 255; statement();
					}
					}
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorDefContext : ParserRuleContext {
		public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(LSharpParser.NEW, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode QM() { return GetToken(LSharpParser.QM, 0); }
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(LSharpParser.STATIC, 0); }
		public CtorDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterCtorDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitCtorDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtorDefContext ctorDef() {
		CtorDefContext _localctx = new CtorDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_ctorDef);
		int _la;
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
			case INTERNAL:
			case PRIVATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; access();
				State = 264; Match(NEW);
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 265; Match(QM);
					State = 268;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NEW:
					case THIS:
					case BASE:
					case IDENT:
						{
						State = 266; ident(0);
						}
						break;
					case DOT:
						{
						State = 267; Match(DOT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 272; Match(LEAD);
				State = 273; Match(OP);
				State = 274; @params();
				State = 275; Match(CP);
				State = 276; Match(ARR);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 277; nonEndingStatement();
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; Match(STATIC);
				State = 284; Match(LEAD);
				State = 285; Match(OP);
				State = 286; Match(CP);
				State = 287; Match(ARR);
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 288; nonEndingStatement();
					}
					}
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 40, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << BASE) | (1L << IDENT))) != 0)) {
				{
				State = 296; ident(0);
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COM) {
				{
				{
				State = 299; Match(COM);
				State = 300; ident(0);
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 42, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; ident(0);
			State = 307; assignOperator();
			State = 308; expression(0);
			State = 309; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public EndingStatementContext[] endingStatement() {
			return GetRuleContexts<EndingStatementContext>();
		}
		public EndingStatementContext endingStatement(int i) {
			return GetRuleContext<EndingStatementContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public TriStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterTriStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitTriStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriStatementContext triStatement() {
		TriStatementContext _localctx = new TriStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_triStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; expression(0);
			State = 312; Match(QM);
			State = 313; ifBlock();
			State = 314; endingStatement();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COL) {
				{
				State = 315; Match(COL);
				State = 316; elseBlock();
				State = 317; endingStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(LSharpParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(WHILE);
			State = 322; expression(0);
			State = 323; Match(ARR);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 324; nonEndingStatement();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 330; endingStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LSharpParser.IDENT, 0); }
		public ITerminalNode IN() { return GetToken(LSharpParser.IN, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(IDENT);
			State = 333; Match(IN);
			State = 334; ident(0);
			State = 335; Match(ARR);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 336; nonEndingStatement();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 342; endingStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WOT() { return GetToken(LSharpParser.WOT, 0); }
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; expression(0);
			State = 345; Match(WOT);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 346; caseBlock();
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEF) {
				{
				State = 352; defaultBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; expression(0);
			State = 356; Match(COL);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 357; nonEndingStatement();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 363; endingStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(DEF);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 366; nonEndingStatement();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 372; endingStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 374; nonEndingStatement();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				{
				State = 380; nonEndingStatement();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(LSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(RETURN);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				State = 387; expression(0);
				}
			}

			State = 390; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullCheckContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEF() { return GetToken(LSharpParser.DEF, 0); }
		public EndingStatementContext endingStatement() {
			return GetRuleContext<EndingStatementContext>(0);
		}
		public NonEndingStatementContext[] nonEndingStatement() {
			return GetRuleContexts<NonEndingStatementContext>();
		}
		public NonEndingStatementContext nonEndingStatement(int i) {
			return GetRuleContext<NonEndingStatementContext>(i);
		}
		public ITerminalNode NIL() { return GetToken(LSharpParser.NIL, 0); }
		public NullCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullCheck; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterNullCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitNullCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullCheckContext nullCheck() {
		NullCheckContext _localctx = new NullCheckContext(Context, State);
		EnterRule(_localctx, 64, RULE_nullCheck);
		int _la;
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; expression(0);
				State = 395; Match(DEF);
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 396; nonEndingStatement();
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 402; endingStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; expression(0);
				State = 405; Match(NIL);
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (VAR - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (WHILE - 17)) | (1L << (SC - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
					{
					{
					State = 406; nonEndingStatement();
					}
					}
					State = 411;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 412; endingStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode LITINT() { return GetToken(LSharpParser.LITINT, 0); }
		public ITerminalNode LITDEC() { return GetToken(LSharpParser.LITDEC, 0); }
		public ITerminalNode LITCHAR() { return GetToken(LSharpParser.LITCHAR, 0); }
		public ITerminalNode LITSTR() { return GetToken(LSharpParser.LITSTR, 0); }
		public ITerminalNode LITBOOL() { return GetToken(LSharpParser.LITBOOL, 0); }
		public ITerminalNode NULL() { return GetToken(LSharpParser.NULL, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ITerminalNode EM() { return GetToken(LSharpParser.EM, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP() { return GetToken(LSharpParser.OP, 0); }
		public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 417; ident(0);
				}
				break;
			case 2:
				{
				State = 418; Match(LITINT);
				}
				break;
			case 3:
				{
				State = 419; Match(LITDEC);
				}
				break;
			case 4:
				{
				State = 420; Match(LITCHAR);
				}
				break;
			case 5:
				{
				State = 421; Match(LITSTR);
				}
				break;
			case 6:
				{
				State = 422; Match(LITBOOL);
				}
				break;
			case 7:
				{
				State = 423; Match(NULL);
				}
				break;
			case 8:
				{
				State = 424; funcCall();
				}
				break;
			case 9:
				{
				State = 425; Match(EM);
				State = 426; expression(2);
				}
				break;
			case 10:
				{
				State = 427; Match(OP);
				State = 428; expression(0);
				State = 429; Match(CP);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 433;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 434; Match(QM);
						State = 435; expression(0);
						State = 436; Match(COL);
						State = 437; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 439;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 440; binaryOp();
						State = 441; expression(4);
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 68, RULE_funcCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; ident(0);
			State = 449; Match(OP);
			State = 450; args();
			State = 451; Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 70, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (NEW - 17)) | (1L << (NULL - 17)) | (1L << (THIS - 17)) | (1L << (BASE - 17)) | (1L << (OP - 17)) | (1L << (EM - 17)) | (1L << (IDENT - 17)) | (1L << (LITINT - 17)) | (1L << (LITDEC - 17)) | (1L << (LITCHAR - 17)) | (1L << (LITSTR - 17)) | (1L << (LITBOOL - 17)))) != 0)) {
				{
				State = 453; expression(0);
				}
			}

			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COM) {
				{
				{
				State = 456; Match(COM);
				State = 457; expression(0);
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LSharpParser.IDENT, 0); }
		public ITerminalNode THIS() { return GetToken(LSharpParser.THIS, 0); }
		public ITerminalNode BASE() { return GetToken(LSharpParser.BASE, 0); }
		public ITerminalNode NEW() { return GetToken(LSharpParser.NEW, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(LSharpParser.DOT, 0); }
		public ITerminalNode LT() { return GetToken(LSharpParser.LT, 0); }
		public ITerminalNode OSB() { return GetToken(LSharpParser.OSB, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		return ident(0);
	}

	private IdentContext ident(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentContext _localctx = new IdentContext(Context, _parentState);
		IdentContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_ident, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 464; Match(IDENT);
				}
				break;
			case THIS:
				{
				State = 465; Match(THIS);
				}
				break;
			case BASE:
				{
				State = 466; Match(BASE);
				}
				break;
			case NEW:
				{
				State = 467; Match(NEW);
				State = 468; funcCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 491;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new IdentContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_ident);
						State = 471;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 472; Match(DOT);
						State = 473; ident(5);
						}
						break;
					case 2:
						{
						_localctx = new IdentContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_ident);
						State = 474;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 475; Match(LT);
						State = 476; ident(0);
						State = 481;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COM) {
							{
							{
							State = 477; Match(COM);
							State = 478; ident(0);
							}
							}
							State = 483;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 484; Match(GT);
						}
						break;
					case 3:
						{
						_localctx = new IdentContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_ident);
						State = 486;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 487; Match(OSB);
						State = 488; expression(0);
						State = 489; Match(CSB);
						}
						break;
					}
					} 
				}
				State = 495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 74, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << PLUS) | (1L << MINUS) | (1L << MULT) | (1L << DIV) | (1L << MOD) | (1L << LTE) | (1L << GTE) | (1L << EQS) | (1L << NEQ) | (1L << AND) | (1L << OR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperatorContext : ParserRuleContext {
		public AssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperatorContext assignOperator() {
		AssignOperatorContext _localctx = new AssignOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_assignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << PEQ) | (1L << MEQ) | (1L << AEQ) | (1L << DEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(LSharpParser.PUBLIC, 0); }
		public ITerminalNode INTERNAL() { return GetToken(LSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(LSharpParser.PRIVATE, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILSharpParserListener typedListener = listener as ILSharpParserListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILSharpParserVisitor<TResult> typedVisitor = visitor as ILSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(Context, State);
		EnterRule(_localctx, 78, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << INTERNAL) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 36: return ident_sempred((IdentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool ident_sempred(IdentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x44', '\x1F9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\x5', '\x2', 'T', '\n', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'W', '\n', '\x2', '\x3', '\x2', '\a', '\x2', 'Z', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', ']', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x61', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x64', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'r', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'y', '\n', '\a', '\f', '\a', '\xE', '\a', '|', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x80', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x85', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x89', '\n', '\b', '\f', '\b', '\xE', '\b', '\x8C', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x92', '\n', '\t', '\f', '\t', '\xE', '\t', '\x95', '\v', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA6', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAA', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xB6', '\n', '\xE', '\x5', '\xE', '\xB8', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xBE', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC3', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\xCF', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xD5', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xDD', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xE3', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xEA', '\n', '\x14', '\x5', '\x14', '\xEC', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\xF4', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\xF7', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xFD', '\n', '\x14', '\x5', '\x14', '\xFF', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x103', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x106', '\v', '\x14', '\x5', '\x14', 
		'\x108', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x10F', '\n', '\x15', '\x5', '\x15', 
		'\x111', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x119', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x11C', '\v', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\x124', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x127', '\v', 
		'\x15', '\x5', '\x15', '\x129', '\n', '\x15', '\x3', '\x16', '\x5', '\x16', 
		'\x12C', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x130', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x133', '\v', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x142', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x148', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x14B', '\v', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x154', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x157', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x15E', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x161', '\v', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x164', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x169', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x16C', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x172', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x175', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\a', 
		'\x1E', '\x17A', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x17D', '\v', 
		'\x1E', '\x3', '\x1F', '\a', '\x1F', '\x180', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x183', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x187', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x190', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x193', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x19A', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x19D', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1A1', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x1B2', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\a', '#', '\x1BE', '\n', '#', '\f', '#', '\xE', '#', '\x1C1', '\v', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x5', '%', '\x1C9', '\n', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x1CD', 
		'\n', '%', '\f', '%', '\xE', '%', '\x1D0', '\v', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1D8', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x1E2', '\n', '&', '\f', 
		'&', '\xE', '&', '\x1E5', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x1EE', '\n', 
		'&', '\f', '&', '\xE', '&', '\x1F1', '\v', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x2', '\x4', 
		'\x44', 'J', '*', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', '\x2', 
		'\x6', '\x3', '\x2', '\x17', '\x18', '\x4', '\x2', '\"', '#', '\x31', 
		';', '\x3', '\x2', '(', ',', '\x3', '\x2', '\xF', '\x11', '\x2', '\x21D', 
		'\x2', 'S', '\x3', '\x2', '\x2', '\x2', '\x4', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x65', '\x3', '\x2', '\x2', '\x2', '\b', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'q', '\x3', '\x2', '\x2', '\x2', '\f', 's', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '}', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC4', '\x3', '\x2', '\x2', '\x2', ' ', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xCC', '\x3', '\x2', '\x2', '\x2', '$', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x107', '\x3', '\x2', '\x2', '\x2', '(', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		',', '\x134', '\x3', '\x2', '\x2', '\x2', '.', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x143', '\x3', '\x2', '\x2', '\x2', '\x32', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x165', '\x3', '\x2', '\x2', '\x2', '\x38', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x17B', '\x3', '\x2', '\x2', '\x2', '<', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1D7', '\x3', '\x2', '\x2', '\x2', 'L', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x1F4', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x5', '\x4', '\x3', '\x2', 'S', 
		'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x5', '\b', '\x5', '\x2', 
		'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', '[', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x5', '\n', '\x6', '\x2', 
		'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '\x3', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x62', '\x5', '\x6', '\x4', '\x2', '_', '\x61', '\x5', 
		'\x6', '\x4', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\x6', '\x2', '\x2', '\x66', 'g', '\x5', 'J', '&', '\x2', 'g', 'h', '\a', 
		'\x1E', '\x2', '\x2', 'h', '\a', '\x3', '\x2', '\x2', '\x2', 'i', 'j', 
		'\a', '\a', '\x2', '\x2', 'j', 'k', '\a', '\b', '\x2', '\x2', 'k', 'l', 
		'\x5', 'J', '&', '\x2', 'l', 'm', '\a', '\x1E', '\x2', '\x2', 'm', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'r', '\x5', '\f', '\a', '\x2', 'o', 'r', 
		'\x5', '\xE', '\b', '\x2', 'p', 'r', '\x5', '\x12', '\n', '\x2', 'q', 
		'n', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', '\v', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x5', 'P', ')', '\x2', 't', 'u', '\a', '\v', '\x2', 
		'\x2', 'u', 'v', '\x5', 'J', '&', '\x2', 'v', 'z', '\a', '\x1F', '\x2', 
		'\x2', 'w', 'y', '\x5', '\x14', '\v', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\r', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', 
		'P', ')', '\x2', '~', '\x80', '\a', '\x12', '\x2', '\x2', '\x7F', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\f', 
		'\x2', '\x2', '\x82', '\x84', '\x5', 'J', '&', '\x2', '\x83', '\x85', 
		'\x5', '\x10', '\t', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x8A', '\a', '\x1F', '\x2', '\x2', '\x87', '\x89', 
		'\x5', '\x16', '\f', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\a', '\xE', '\x2', '\x2', '\x8E', '\x93', '\x5', 'J', 
		'&', '\x2', '\x8F', '\x90', '\a', '\x30', '\x2', '\x2', '\x90', '\x92', 
		'\x5', 'J', '&', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x5', 'P', ')', '\x2', '\x97', '\x98', '\a', '\r', '\x2', '\x2', 
		'\x98', '\x99', '\x5', 'J', '&', '\x2', '\x99', '\x9A', '\a', '\x1F', 
		'\x2', '\x2', '\x9A', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\t', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x5', 'J', '&', '\x2', '\x9D', 
		'\x9E', '\a', '$', '\x2', '\x2', '\x9E', '\x9F', '\x5', '*', '\x16', '\x2', 
		'\x9F', '\xA0', '\a', '%', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x1E', 
		'\x2', '\x2', '\xA1', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA6', 
		'\x5', '\"', '\x12', '\x2', '\xA3', '\xA6', '\x5', '&', '\x14', '\x2', 
		'\xA4', '\xA6', '\x5', '(', '\x15', '\x2', '\xA5', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xAA', '\x5', '\x1A', '\xE', '\x2', '\xA8', '\xAA', '\x5', '\x1C', 
		'\xF', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xBE', '\x5', '$', '\x13', '\x2', '\xAC', '\xBE', '\x5', ',', 
		'\x17', '\x2', '\xAD', '\xBE', '\x5', '.', '\x18', '\x2', '\xAE', '\xBE', 
		'\x5', '\x30', '\x19', '\x2', '\xAF', '\xBE', '\x5', '\x32', '\x1A', '\x2', 
		'\xB0', '\xBE', '\x5', '\x34', '\x1B', '\x2', '\xB1', '\xB7', '\x5', '\x46', 
		'$', '\x2', '\xB2', '\xB5', '\a', '-', '\x2', '\x2', '\xB3', '\xB6', '\x5', 
		'J', '&', '\x2', '\xB4', '\xB6', '\a', '!', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x1E', '\x2', '\x2', 
		'\xBA', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x5', '@', 
		'!', '\x2', '\xBC', '\xBE', '\x5', '\x42', '\"', '\x2', '\xBD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC3', 
		'\x5', '>', ' ', '\x2', '\xC0', '\xC3', '\x5', '\x1E', '\x10', '\x2', 
		'\xC1', '\xC3', '\x5', ' ', '\x11', '\x2', '\xC2', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC5', '\a', '\x15', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x1E', 
		'\x2', '\x2', '\xC6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\a', '\x15', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x16', '\x2', '\x2', 
		'\xC9', '\xCA', '\x5', 'J', '&', '\x2', '\xCA', '\xCB', '\a', '\x1E', 
		'\x2', '\x2', '\xCB', '!', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\x5', 'P', ')', '\x2', '\xCD', '\xCF', '\a', '\x12', '\x2', '\x2', '\xCE', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'\x17', '\x2', '\x2', '\xD1', '\xD4', '\a', '?', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '(', '\x2', '\x2', '\xD3', '\xD5', '\x5', '\x44', '#', '\x2', 
		'\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', '\x1E', '\x2', '\x2', '\xD7', '#', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\a', '\x17', '\x2', '\x2', '\xD9', '\xDC', '\a', '?', '\x2', 
		'\x2', '\xDA', '\xDB', '\a', '(', '\x2', '\x2', '\xDB', '\xDD', '\x5', 
		'\x44', '#', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x1E', '\x2', '\x2', '\xDF', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', 'P', ')', '\x2', '\xE1', '\xE3', 
		'\a', '\x12', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\t', '\x2', '\x2', '\x2', '\xE5', '\xEB', 
		'\x5', 'J', '&', '\x2', '\xE6', '\xE9', '\a', '-', '\x2', '\x2', '\xE7', 
		'\xEA', '\x5', 'J', '&', '\x2', '\xE8', '\xEA', '\a', '!', '\x2', '\x2', 
		'\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x1F', 
		'\x2', '\x2', '\xEE', '\xEF', '\a', '$', '\x2', '\x2', '\xEF', '\xF0', 
		'\x5', '*', '\x16', '\x2', '\xF0', '\xF1', '\a', '%', '\x2', '\x2', '\xF1', 
		'\xF5', '\a', ' ', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\x18', '\r', 
		'\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFE', '\a', 
		'\x1D', '\x2', '\x2', '\xF9', '\xFC', '\a', '-', '\x2', '\x2', '\xFA', 
		'\xFD', '\x5', 'J', '&', '\x2', '\xFB', '\xFD', '\a', '!', '\x2', '\x2', 
		'\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x104', '\a', '\x1F', 
		'\x2', '\x2', '\x101', '\x103', '\x5', '\x18', '\r', '\x2', '\x102', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x108', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x108', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\x5', 'P', ')', '\x2', '\x10A', 
		'\x110', '\a', '\x13', '\x2', '\x2', '\x10B', '\x10E', '\a', '-', '\x2', 
		'\x2', '\x10C', '\x10F', '\x5', 'J', '&', '\x2', '\x10D', '\x10F', '\a', 
		'!', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\a', '\x1F', '\x2', '\x2', '\x113', '\x114', '\a', 
		'$', '\x2', '\x2', '\x114', '\x115', '\x5', '*', '\x16', '\x2', '\x115', 
		'\x116', '\a', '%', '\x2', '\x2', '\x116', '\x11A', '\a', ' ', '\x2', 
		'\x2', '\x117', '\x119', '\x5', '\x1A', '\xE', '\x2', '\x118', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x12', '\x2', 
		'\x2', '\x11E', '\x11F', '\a', '\x1F', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '$', '\x2', '\x2', '\x120', '\x121', '\a', '%', '\x2', '\x2', '\x121', 
		'\x125', '\a', ' ', '\x2', '\x2', '\x122', '\x124', '\x5', '\x1A', '\xE', 
		'\x2', '\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x128', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x129', ')', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', '\x5', 
		'J', '&', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\a', '\x30', '\x2', '\x2', '\x12E', '\x130', 
		'\x5', 'J', '&', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x133', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x5', 'J', '&', '\x2', '\x135', '\x136', '\x5', 
		'N', '(', '\x2', '\x136', '\x137', '\x5', '\x44', '#', '\x2', '\x137', 
		'\x138', '\a', '\x1E', '\x2', '\x2', '\x138', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\x5', '\x44', '#', '\x2', '\x13A', '\x13B', 
		'\a', '-', '\x2', '\x2', '\x13B', '\x13C', '\x5', ':', '\x1E', '\x2', 
		'\x13C', '\x141', '\x5', '\x1C', '\xF', '\x2', '\x13D', '\x13E', '\a', 
		'.', '\x2', '\x2', '\x13E', '\x13F', '\x5', '<', '\x1F', '\x2', '\x13F', 
		'\x140', '\x5', '\x1C', '\xF', '\x2', '\x140', '\x142', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x144', '\a', '\x1C', '\x2', '\x2', '\x144', '\x145', '\x5', 
		'\x44', '#', '\x2', '\x145', '\x149', '\a', ' ', '\x2', '\x2', '\x146', 
		'\x148', '\x5', '\x1A', '\xE', '\x2', '\x147', '\x146', '\x3', '\x2', 
		'\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x149', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14D', '\x5', '\x1C', '\xF', '\x2', '\x14D', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\a', '?', '\x2', 
		'\x2', '\x14F', '\x150', '\a', '\t', '\x2', '\x2', '\x150', '\x151', '\x5', 
		'J', '&', '\x2', '\x151', '\x155', '\a', ' ', '\x2', '\x2', '\x152', '\x154', 
		'\x5', '\x1A', '\xE', '\x2', '\x153', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x157', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x159', '\x5', '\x1C', '\xF', '\x2', '\x159', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x5', '\x44', '#', '\x2', 
		'\x15B', '\x15F', '\a', '<', '\x2', '\x2', '\x15C', '\x15E', '\x5', '\x36', 
		'\x1C', '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x164', '\x5', '\x38', '\x1D', '\x2', '\x163', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x5', '\x44', '#', 
		'\x2', '\x166', '\x16A', '\a', '.', '\x2', '\x2', '\x167', '\x169', '\x5', 
		'\x1A', '\xE', '\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x5', '\x1C', '\xF', '\x2', '\x16E', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x173', '\a', '=', '\x2', '\x2', '\x170', 
		'\x172', '\x5', '\x1A', '\xE', '\x2', '\x171', '\x170', '\x3', '\x2', 
		'\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x176', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x5', '\x1C', '\xF', '\x2', '\x177', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', '\x5', '\x1A', '\xE', 
		'\x2', '\x179', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', 
		'\x5', '\x1A', '\xE', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x183', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x184', '\x186', '\a', '\x14', '\x2', '\x2', '\x185', '\x187', 
		'\x5', '\x44', '#', '\x2', '\x186', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x189', '\a', '\x1E', '\x2', '\x2', '\x189', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', '\x1E', '\x2', 
		'\x2', '\x18B', '\x41', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', 
		'\x5', '\x44', '#', '\x2', '\x18D', '\x191', '\a', '=', '\x2', '\x2', 
		'\x18E', '\x190', '\x5', '\x1A', '\xE', '\x2', '\x18F', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x193', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x194', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x5', '\x1C', '\xF', '\x2', 
		'\x195', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x5', 
		'\x44', '#', '\x2', '\x197', '\x19B', '\a', '>', '\x2', '\x2', '\x198', 
		'\x19A', '\x5', '\x1A', '\xE', '\x2', '\x199', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\x5', '\x1C', '\xF', '\x2', '\x19F', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x196', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\b', '#', '\x1', '\x2', 
		'\x1A3', '\x1B2', '\x5', 'J', '&', '\x2', '\x1A4', '\x1B2', '\a', '@', 
		'\x2', '\x2', '\x1A5', '\x1B2', '\a', '\x41', '\x2', '\x2', '\x1A6', '\x1B2', 
		'\a', '\x42', '\x2', '\x2', '\x1A7', '\x1B2', '\a', '\x43', '\x2', '\x2', 
		'\x1A8', '\x1B2', '\a', '\x44', '\x2', '\x2', '\x1A9', '\x1B2', '\a', 
		'\x19', '\x2', '\x2', '\x1AA', '\x1B2', '\x5', '\x46', '$', '\x2', '\x1AB', 
		'\x1AC', '\a', '/', '\x2', '\x2', '\x1AC', '\x1B2', '\x5', '\x44', '#', 
		'\x4', '\x1AD', '\x1AE', '\a', '$', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', 
		'\x44', '#', '\x2', '\x1AF', '\x1B0', '\a', '%', '\x2', '\x2', '\x1B0', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\f', '\a', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\a', '-', '\x2', '\x2', '\x1B5', '\x1B6', '\x5', '\x44', 
		'#', '\x2', '\x1B6', '\x1B7', '\a', '.', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\x5', '\x44', '#', '\b', '\x1B8', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\f', '\x5', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', 
		'L', '\'', '\x2', '\x1BB', '\x1BC', '\x5', '\x44', '#', '\x6', '\x1BC', 
		'\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C3', '\x5', 'J', '&', '\x2', '\x1C3', '\x1C4', '\a', '$', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\x5', 'H', '%', '\x2', '\x1C5', '\x1C6', '\a', '%', 
		'\x2', '\x2', '\x1C6', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C9', 
		'\x5', '\x44', '#', '\x2', '\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x30', '\x2', '\x2', '\x1CB', 
		'\x1CD', '\x5', '\x44', '#', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', 'I', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D2', '\b', '&', '\x1', '\x2', '\x1D2', '\x1D8', 
		'\a', '?', '\x2', '\x2', '\x1D3', '\x1D8', '\a', '\x1A', '\x2', '\x2', 
		'\x1D4', '\x1D8', '\a', '\x1B', '\x2', '\x2', '\x1D5', '\x1D6', '\a', 
		'\x13', '\x2', '\x2', '\x1D6', '\x1D8', '\x5', '\x46', '$', '\x2', '\x1D7', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D7', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DA', '\f', '\x6', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '!', 
		'\x2', '\x2', '\x1DB', '\x1EE', '\x5', 'J', '&', '\a', '\x1DC', '\x1DD', 
		'\f', '\x5', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '\"', '\x2', '\x2', 
		'\x1DE', '\x1E3', '\x5', 'J', '&', '\x2', '\x1DF', '\x1E0', '\a', '\x30', 
		'\x2', '\x2', '\x1E0', '\x1E2', '\x5', 'J', '&', '\x2', '\x1E1', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '#', '\x2', 
		'\x2', '\x1E7', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\f', '\x4', '\x2', '\x2', '\x1E9', '\x1EA', '\a', '&', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x5', '\x44', '#', '\x2', '\x1EB', '\x1EC', '\a', '\'', 
		'\x2', '\x2', '\x1EC', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\t', '\x3', '\x2', '\x2', '\x1F3', 'M', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1F5', '\t', '\x4', '\x2', '\x2', '\x1F5', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F7', '\t', '\x5', '\x2', '\x2', '\x1F7', 'Q', '\x3', 
		'\x2', '\x2', '\x2', ':', 'S', 'V', '[', '\x62', 'q', 'z', '\x7F', '\x84', 
		'\x8A', '\x93', '\xA5', '\xA9', '\xB5', '\xB7', '\xBD', '\xC2', '\xCE', 
		'\xD4', '\xDC', '\xE2', '\xE9', '\xEB', '\xF5', '\xFC', '\xFE', '\x104', 
		'\x107', '\x10E', '\x110', '\x11A', '\x125', '\x128', '\x12B', '\x131', 
		'\x141', '\x149', '\x155', '\x15F', '\x163', '\x16A', '\x173', '\x17B', 
		'\x181', '\x186', '\x191', '\x19B', '\x1A0', '\x1B1', '\x1BD', '\x1BF', 
		'\x1C8', '\x1CE', '\x1D7', '\x1E3', '\x1ED', '\x1EF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
