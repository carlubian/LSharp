//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\LSharpParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="LSharpParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public interface ILSharpParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] LSharpParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.usingList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsingList([NotNull] LSharpParser.UsingListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.using"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsing([NotNull] LSharpParser.UsingContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamespace([NotNull] LSharpParser.NamespaceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.langMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLangMember([NotNull] LSharpParser.LangMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.interfaceDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterfaceDef([NotNull] LSharpParser.InterfaceDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.classDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassDef([NotNull] LSharpParser.ClassDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.baseClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseClass([NotNull] LSharpParser.BaseClassContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.enumDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumDef([NotNull] LSharpParser.EnumDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.interfaceMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterfaceMember([NotNull] LSharpParser.InterfaceMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.classMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassMember([NotNull] LSharpParser.ClassMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] LSharpParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.nonEndingStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonEndingStatement([NotNull] LSharpParser.NonEndingStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.endingStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEndingStatement([NotNull] LSharpParser.EndingStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] LSharpParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitThrowStatement([NotNull] LSharpParser.ThrowStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.varDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDef([NotNull] LSharpParser.VarDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.localDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLocalDef([NotNull] LSharpParser.LocalDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncDef([NotNull] LSharpParser.FuncDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.ctorDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCtorDef([NotNull] LSharpParser.CtorDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParams([NotNull] LSharpParser.ParamsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.assign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign([NotNull] LSharpParser.AssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.triStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTriStatement([NotNull] LSharpParser.TriStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] LSharpParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.foreachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForeachStatement([NotNull] LSharpParser.ForeachStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchStatement([NotNull] LSharpParser.SwitchStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseBlock([NotNull] LSharpParser.CaseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.defaultBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultBlock([NotNull] LSharpParser.DefaultBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfBlock([NotNull] LSharpParser.IfBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.elseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseBlock([NotNull] LSharpParser.ElseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] LSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] LSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.nullCheck"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullCheck([NotNull] LSharpParser.NullCheckContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] LSharpParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCall([NotNull] LSharpParser.FuncCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgs([NotNull] LSharpParser.ArgsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.ident"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdent([NotNull] LSharpParser.IdentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.binaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOp([NotNull] LSharpParser.BinaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.assignOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignOperator([NotNull] LSharpParser.AssignOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LSharpParser.access"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAccess([NotNull] LSharpParser.AccessContext context);
}
